package com.nt.service;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.aop.ThrowsAdvice;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.nt.Repository.IMovieRepo;
import com.nt.entity.Movie;

import jakarta.persistence.criteria.CriteriaBuilder.In;

@Service("movieService")
public class MovieMgmtServiceImpl implements IMovieMgmtService {
	@Autowired // impacts the dynamically generated by proxy class object
	private IMovieRepo movieRepo;


@Override
public String removeMoviesByIds(List<Integer> ids) {
	List<Movie>list=movieRepo.findAllById(ids);
	long count=((List<Movie>)list).size();
	if(ids.size()!=0 && ids.size()==count) {
	movieRepo.deleteAllByIdInBatch(ids);
	return count   +" no. of records are deleted";
}
	else 
		return "No Ids are given to delete or either all or some ids are not available  to delete";
}

//////////////////////////////////////////////////////////////////////////////////////////
@Override
public List<Movie> searchMoviesByMovie(Movie movie, boolean asc, String... props) {
Example example=Example.of(movie);
Sort sort=Sort.by(asc?Direction.ASC:Direction.DESC,props);
List<Movie>list=movieRepo.findAll(example,sort);
	return list;
}

///////////////////////////////////////////////////////////////
@Override
@Transactional
public Movie searchMovieById(Integer id) {
	Movie movie=movieRepo.getById(id);
	if(movie==null)
		throw new IllegalArgumentException("given movie not available");
	else
		return movie;

}

}
